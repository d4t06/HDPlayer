{"version":3,"file":"actions.js","names":["collection","getDocs","query","where","songListSelect","songlist","timeSliderCurrent","timeSliderHolder","currentTimeEle","durationEle","volumeSliderCurrent","switchBtn","randomBtn","rePeatBtn","player","db","onPauseHandle","getLocalStorageItem","$","document","querySelector","bind","$$","querySelectorAll","actuallySongs","getActuallySongs","console","log","this","song_in","playlistSongs","songs","fetchSongs","async","songSollectionRef","queryGetSongs","playlistCollectionRef","queryGetPlaylists","songsSnap","playlistsSnap","docs","length","userSongs","map","doc","data","temporarySongs","playlists","error","sortSongs","sortedSongs","sort","a","b","name","render","songListHTML","forEach","song","index","image_url","singer","innerHTML","renderMenu","playlistHTML","playlist","nextSong","newIndex","currentIndex","endOfList","loadCurrentSong","prevSong","randomSong","Math","floor","random","style","width","transform","innerText","singerEle","titleEle","cdEle","audioEle","titleEl","songElements","transition","currentSong","currentSongEle","songEle","classList","contains","remove","add","backgroundImage","src","song_url","title","loadConfig","isRepeat","isDark","window","innerWidth","volume","toggle","isRandom"],"sources":["js/actions.js"],"mappings":"qBAASA,aAAYC,WAASC,WAAOC,MAAa,2FAG/CC,cACAC,uBACAC,sBACAC,oBACAC,iBACAC,yBACAC,eACAC,eACAC,eACAC,YACAC,MACI,6BACEC,MAAU,+CACVC,MAAqB,iDACrBC,MAA2B,uBAEpC,MAAMC,EAAIC,SAASC,cAAcC,KAAKF,UAChCG,EAAKH,SAASI,iBAAiBF,KAAKF,UAE1C,IAAIK,EAAgB,UAEb,MAAMC,iBAAmB,WAC7BC,QAAQC,IAAI,sBACZH,EAAiC,aAAjBI,KAAKC,QAAyBD,KAAKE,cAAgBF,KAAKG,KAC3E,SAEO,MAAMC,WAAaC,iBACvB,MAAMC,EAAoBlC,EAAWe,EAAI,SACnCoB,EAAgBjC,EAAMgC,EAAmB/B,EAAM,KAAM,KAAM,6BAE3DiC,EAAwBpC,EAAWe,EAAI,YACvCsB,EAAoBnC,EAAMkC,EAAuBjC,EAAM,KAAM,KAAM,6BAEzE,IACG,MAAMmC,QAAkBrC,EAAQkC,GAC1BI,QAAsBtC,EAAQoC,GAEpC,GAAIC,EAAUE,KAAKC,OAAQ,CACxB,MAAMC,EAAYJ,EAAUE,KAAKG,KAAKC,GAAQA,EAAIC,SAClDjB,KAAKG,MAAQW,CAChB,MACGd,KAAKG,MAAQe,eAGhB,GAAIP,EAAcC,KAAKC,OAAQ,CAC5B,MAAMM,EAAYR,EAAcC,KAAKG,KAAKC,GAAQA,EAAIC,SACtDjB,KAAKmB,UAAYA,CACpB,CACH,CAAE,MAAOC,GACNtB,QAAQC,IAAIqB,EACf,CACH,SAEO,MAAMC,UAAY,WACtB,IAAIC,EAActB,KAAKG,MAAMoB,MAAK,CAACC,EAAGC,IAC5BD,EAAEE,KAAOD,EAAEC,OAErB1B,KAAKG,MAAQmB,CAChB,SAEO,MAAMK,OAAS,WACnB,IAAIC,EAAe,GAEnB,IAAIhC,EAAciB,OAgBX,OAAQe,GAAgB,mCAf5BhC,EAAciC,SAAQ,CAACC,EAAMC,KAC1BH,GAAgB,6BAA6BG,+GAEaD,EAAKE,WAAa,oIAIjEF,EAAKJ,gCACLI,EAAKG,0KAKT,IAIbxD,EAASyD,UAAYN,CACxB,SAEO,MAAMO,WAAa,WACvB,IAAIC,EAAe,oCAEfpC,MAAMmB,WAAWN,SAClBb,KAAKmB,UAAUU,SACXQ,GAAcD,GAAgB,kBAAkBC,EAASX,SAASW,EAASX,kBAE/ElD,EAAe0D,UAAYE,EAEjC,SAEO,MAAME,SAAW,WACrB,IAAIC,EAAWvC,KAAKwC,aAAe,EAE/BD,GAAY3C,EAAciB,OAAS,EACpCb,KAAKwC,aAAeD,GAEpBvC,KAAKwC,aAAe,EACpBxC,KAAKyC,WAAY,GAGpBzC,KAAK0C,iBACR,SAEO,MAAMC,SAAW,WACrB3C,KAAKwC,aAAexC,KAAKwC,aAAe,EAAIxC,KAAKwC,aAAe,EAAI5C,EAAciB,OAAS,EAC3Fb,KAAK0C,iBACR,SAEO,MAAME,WAAa,WACvB,IAAIL,EAAW,EACf,GACGA,EAAWM,KAAKC,MAAMlD,EAAciB,OAASgC,KAAKE,gBAC5CR,IAAavC,KAAKwC,cAC3BxC,KAAKwC,aAAeD,EACpBvC,KAAK0C,iBACR,SAUO,MAAMA,gBAAkB,WAC5BtD,EAAcY,MARdtB,EAAkBsE,MAAMC,MAAQ,KAEhCtE,EAAiBqE,MAAME,UAAY,yBACnCtE,EAAeuE,UAAY,QAC3BtE,EAAYsE,UAAY,UAOxBrD,QAAQC,IAAI,YAEZ,IAAIqD,EAAY9D,EAAE,iBACd+D,EAAW/D,EAAE,iBACbgE,EAAQhE,EAAE,WACViE,EAAWjE,EAAE,UACbkE,EAAUlE,EAAE,qBACZmE,EAAe/D,EAAG,cAEY,UAA9B2D,EAASL,MAAMU,aAChB5D,QAAQC,IAAI,iBACZyD,EAAQR,MAAMU,WAAa,QAC3BF,EAAQR,MAAME,UAAY,mBAG7B,MAAMS,EAAc/D,EAAcI,KAAKwC,cACjCoB,EAAiBH,EAAazD,KAAKwC,cAIzC,IAAK,IAAIqB,KAAWJ,EACbI,EAAQC,UAAUC,SAAS,WAC5BF,EAAQC,UAAUE,OAAO,UAG/BJ,EAAeE,UAAUG,IAAI,UAE7Bb,EAAUD,UAAYQ,EAAY1B,OAClCoB,EAASF,UAAYQ,EAAYjC,KACjC4B,EAAMN,MAAMkB,gBAAkB,OAAOP,EAAY3B,WAAa,8BAC9DuB,EAASY,IAAMR,EAAYS,SAC3B7E,SAAS8E,MAAQV,EAAYjC,IAChC,SAEO,MAAM4C,WAAa,WAIvB,GAHAtE,KAAKuE,SAAWlF,EAAoB,YACpCW,KAAKwE,OAASnF,EAAoB,UAE9BoF,OAAOC,WAAa,IAAK,CAC1B,IAAIC,EAAStF,EAAoB,UACjCP,EAAoBkE,MAAMC,MAAiB,IAAT0B,EAAe,IAEjD3E,KAAK2E,OAASA,CACjB,CAGA3F,EAAU8E,UAAUc,OAAO,WAAY5E,KAAK6E,UAC5C5F,EAAU6E,UAAUc,OAAO,WAAY5E,KAAKuE,UAE5CrF,EAAO4E,UAAUc,OAAO,SAAU5E,KAAKwE,QAEvCzF,EAAU+E,UAAUc,OAAO,SAAU5E,KAAKwE,OAM7C","sourcesContent":["import { collection, getDocs, query, where } from \"https://www.gstatic.com/firebasejs/10.4.0/firebase-firestore.js\";\r\n\r\nimport {\r\n   songListSelect,\r\n   songlist,\r\n   timeSliderCurrent,\r\n   timeSliderHolder,\r\n   currentTimeEle,\r\n   durationEle,\r\n   volumeSliderCurrent,\r\n   switchBtn,\r\n   randomBtn,\r\n   rePeatBtn,\r\n   player,\r\n} from \"./constant.js\";\r\nimport { db } from \"./firebase/config.js\";\r\nimport { onPauseHandle } from \"./handleEvent.js\";\r\nimport { getLocalStorageItem } from \"./utils/appHelper.js\";\r\n\r\nconst $ = document.querySelector.bind(document);\r\nconst $$ = document.querySelectorAll.bind(document);\r\n\r\nlet actuallySongs = [];\r\n\r\nexport const getActuallySongs = function () {\r\n   console.log(\"get actually songs\");\r\n   actuallySongs = this.song_in === \"playlist\" ? this.playlistSongs : this.songs;\r\n};\r\n\r\nexport const fetchSongs = async function () {\r\n   const songSollectionRef = collection(db, \"songs\");\r\n   const queryGetSongs = query(songSollectionRef, where(\"by\", \"==\", \"huudat01234560@gmail.com\"));\r\n\r\n   const playlistCollectionRef = collection(db, \"playlist\");\r\n   const queryGetPlaylists = query(playlistCollectionRef, where(\"by\", \"==\", \"huudat01234560@gmail.com\"));\r\n\r\n   try {\r\n      const songsSnap = await getDocs(queryGetSongs);\r\n      const playlistsSnap = await getDocs(queryGetPlaylists);\r\n\r\n      if (songsSnap.docs.length) {\r\n         const userSongs = songsSnap.docs.map((doc) => doc.data());\r\n         this.songs = userSongs;\r\n      } else {\r\n         this.songs = temporarySongs;\r\n      }\r\n\r\n      if (playlistsSnap.docs.length) {\r\n         const playlists = playlistsSnap.docs.map((doc) => doc.data());\r\n         this.playlists = playlists;\r\n      }\r\n   } catch (error) {\r\n      console.log(error);\r\n   }\r\n};\r\n\r\nexport const sortSongs = function () {\r\n   var sortedSongs = this.songs.sort((a, b) => {\r\n      return a.name > b.name;\r\n   });\r\n   this.songs = sortedSongs;\r\n};\r\n\r\nexport const render = function () {\r\n   let songListHTML = \"\";\r\n\r\n   if (actuallySongs.length) {\r\n      actuallySongs.forEach((song, index) => {\r\n         songListHTML += `<li class=\"song-item\" id=\"${index}\">\r\n            <div class=\"song-frame\">\r\n              <div class=\"song-img\" style=\"background-image: url(${song.image_url || \"https://placehold.co/100\"})\" >\r\n              </div>\r\n            </div>\r\n            <div class=\"song-info\">\r\n              <h2>${song.name}</h2>\r\n              <h4>${song.singer}</h4>\r\n            </div>\r\n            <div class=\"song-detail\">\r\n              <i class=\"fa-solid fa-ellipsis-vertical\"></i>\r\n            </div>\r\n          </li>`;\r\n      });\r\n   } else return (songListHTML += \"<h1>Error when render songs</h1>\");\r\n\r\n   songlist.innerHTML = songListHTML;\r\n};\r\n\r\nexport const renderMenu = function () {\r\n   let playlistHTML = '<option value=\"\">Default</option>';\r\n\r\n   if (this?.playlists?.length) {\r\n      this.playlists.forEach(\r\n         (playlist) => (playlistHTML += `<option value='${playlist.name}'>${playlist.name}</option>`)\r\n      );\r\n      songListSelect.innerHTML = playlistHTML;\r\n   }\r\n};\r\n\r\nexport const nextSong = function () {\r\n   let newIndex = this.currentIndex + 1;\r\n\r\n   if (newIndex <= actuallySongs.length - 1) {\r\n      this.currentIndex = newIndex;\r\n   } else {\r\n      this.currentIndex = 0;\r\n      this.endOfList = true;\r\n   }\r\n\r\n   this.loadCurrentSong();\r\n};\r\n\r\nexport const prevSong = function () {\r\n   this.currentIndex = this.currentIndex > 0 ? this.currentIndex - 1 : actuallySongs.length - 1;\r\n   this.loadCurrentSong();\r\n};\r\n\r\nexport const randomSong = function () {\r\n   let newIndex = 0;\r\n   do {\r\n      newIndex = Math.floor(actuallySongs.length * Math.random());\r\n   } while (newIndex === this.currentIndex);\r\n   this.currentIndex = newIndex;\r\n   this.loadCurrentSong();\r\n};\r\n\r\nconst resetForNewSong = () => {\r\n   timeSliderCurrent.style.width = \"0%\";\r\n   // timeSliderHolder.style.left = \"0%\";\r\n   timeSliderHolder.style.transform = `translateX(100%, -50%)`;\r\n   currentTimeEle.innerText = \"00:00\";\r\n   durationEle.innerText = \"/ --:--\";\r\n};\r\n\r\nexport const loadCurrentSong = function () {\r\n   onPauseHandle(this);\r\n   resetForNewSong();\r\n\r\n   console.log('run this');\r\n\r\n   let singerEle = $(\".dashboard h4\");\r\n   let titleEle = $(\".dashboard h2\");\r\n   let cdEle = $(\".cd-img\");\r\n   let audioEle = $(\".audio\");\r\n   let titleEl = $(\".title-wrapper h2\");\r\n   let songElements = $$(\".song-item\");\r\n\r\n   if (titleEle.style.transition !== \"unset\") {\r\n      console.log(\"unScroll text\");\r\n      titleEl.style.transition = `unset`;\r\n      titleEl.style.transform = `translateX(0px)`;\r\n   }\r\n\r\n   const currentSong = actuallySongs[this.currentIndex];\r\n   const currentSongEle = songElements[this.currentIndex];\r\n\r\n   // console.log('check current songs', currentSong)\r\n\r\n   for (var songEle of songElements) {\r\n      if (songEle.classList.contains(\"active\")) {\r\n         songEle.classList.remove(\"active\");\r\n      }\r\n   }\r\n   currentSongEle.classList.add(\"active\");\r\n\r\n   singerEle.innerText = currentSong.singer;\r\n   titleEle.innerText = currentSong.name;\r\n   cdEle.style.backgroundImage = `url(${currentSong.image_url || \"https://placehold.co/300\"})`;\r\n   audioEle.src = currentSong.song_url;\r\n   document.title = currentSong.name;\r\n};\r\n\r\nexport const loadConfig = function () {\r\n   this.isRepeat = getLocalStorageItem(\"isRepeat\");\r\n   this.isDark = getLocalStorageItem(\"isDark\");\r\n\r\n   if (window.innerWidth > 550) {\r\n      let volume = getLocalStorageItem(\"volume\");\r\n      volumeSliderCurrent.style.width = volume * 100 + \"%\";\r\n\r\n      this.volume = volume;\r\n   }\r\n\r\n   // cấu hình trình phát\r\n   randomBtn.classList.toggle(\"active\", !!this.isRandom);\r\n   rePeatBtn.classList.toggle(\"active\", !!this.isRepeat);\r\n   //cấu hình dark mode\r\n   player.classList.toggle(\"dark\", !!this.isDark);\r\n   // console.log(switchBtn);\r\n   switchBtn.classList.toggle(\"dark\", !!this.isDark);\r\n   // console.log(switchBtn);\r\n\r\n   // cấu hình option playlist\r\n   // const option = this.lastPlayList ? this.lastPlayList[this.lastPlayList.length - 1] : 0;\r\n   // songListSelect.options[option].selected = true;\r\n};\r\n"]}