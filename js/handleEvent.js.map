{"version":3,"file":"handleEvent.js","names":["handleTimeText","setLocalStorage","dashboard","cd","cdImg","playBtn","prevBtn","nextBtn","randomBtn","rePeatBtn","musicVolume","gotopBtn","timeSlider","timeSliderCurrent","timeSliderHolder","volumeSliderCurrent","currentTimeEle","durationEle","$","document","querySelector","bind","$$","querySelectorAll","intervalId","onPauseHandle","_this","classList","remove","isPlaying","style","animationPlayState","this","audio","songElements","cdWidth","offsetWidth","isDesktop","window","innerWidth","firstTimeRender","isLoadedAudio","volume","playSong","play","add","scrollToActive","activeSongEle","setTimeout","scrollIntoView","behavior","block","handleScrollActiveSongIntoView","curIndex","undefined","rect","getBoundingClientRect","playerHeight","offsetHeight","topCondition","top","bottomCondition","innerHeight","console","log","onclick","currentIndex","scrollText","clearInterval","duration","distance","titleEl","singerWrapper","scroll","transition","transform","unScroll","toFixed","innerHTML","innerText","setInterval","forEach","song","e","target","parentElement","contains","id","loadCurrentSong","onscroll","scrollTop","scrollY","documentElement","newCdWidth","newOpacity","width","opacity","updateVolume","vol","onplaying","isWaiting","onpause","ontimeupdate","currentTime","onended","isRepeat","isRandom","randomSong","nextSong","onloadedmetadata","endOfList","onwaiting","volumeBaseWidth","clientX","onwheel","preventDefault","AMOUNT","newVolume","deltaY","playerWidth","newCurrentTime","Math","floor","newTime","pause","prevSong","value","toggle"],"sources":["js/handleEvent.js"],"mappings":"yBAASA,qBAAgBC,MAAuB,2CAE7CC,QACAC,WACAC,aACAC,aACAC,aACAC,eACAC,eACAC,iBACAC,cACAC,gBACAC,uBACAC,sBACAC,yBACAC,oBACAC,iBACAC,MACI,gBAEP,MAAMC,EAAIC,SAASC,cAAcC,KAAKF,UAChCG,EAAKH,SAASI,iBAAiBF,KAAKF,UAE1C,IAAIK,EAEJ,MAAMC,EAAgB,SAAUC,GAC7BrB,EAAQsB,UAAUC,OAAO,WACzBF,EAAMG,WAAY,EAClBzB,EAAM0B,MAAMC,mBAAqB,QACpC,SA0TSN,mCAxTY,WAClB,MAAMC,EAAQM,KACRC,EAAQf,EAAE,UACVgB,EAAeZ,EAAG,cAElBa,EAAUhC,EAAGiC,YACbC,EAAYC,OAAOC,YAAc,IAEvC,IAAIC,GAAkB,EAClBC,GAAgB,EAEpBR,EAAMS,OAASV,KAAKU,OAGpB,MAAMC,EAAW,WACdV,EAAMW,OACNlB,EAAMG,WAAY,EAClBxB,EAAQsB,UAAUkB,IAAI,UACzB,EAEMC,EAAiB,SAAUC,GAC9BC,YAAW,KACRD,EAAcE,eAAe,CAC1BC,SAAU,SACVC,MAAO,UACR,GACF,IACN,EAEMC,EAAkCC,IACrC,MAAMN,EAAgB7B,EAAE,qBACxB,IAAK6B,EAAe,OAEpB,QAAiBO,IAAbD,EAAwB,OAAOP,EAAeZ,EAAamB,IAE/D,MAAME,EAAOR,EAAcS,wBAErBC,EAAevD,EAAUwD,aACzBC,EAAetB,EAAYkB,EAAKK,IAAM,EAAIL,EAAKK,IAAMH,EACrDI,EAAkBN,EAAKK,IAAMtB,OAAOwB,YAEtCH,GAAgBE,GACjBE,QAAQC,IAAI,UACZlB,EAAeC,IAEfgB,QAAQC,IAAI,YACf,EAcH5D,EAAM6D,QAAU,KACbb,EAA+B1B,EAAMwC,aAAa,EAGrD,MAQMC,EAAa,KACZ3C,GAAY4C,cAAc5C,GAE9B,IAEI6C,EAAUC,EAFVC,EAAUrD,EAAE,qBACZsD,EAAgBtD,EAAE,kBAGtB,IAAKqD,IAAYC,EAAe,OAEhC,MAMMC,EAAS,KACZV,QAAQC,IAAI,eAEZO,EAAQzC,MAAM4C,WAAa,oBAAoBL,KAC/CE,EAAQzC,MAAM6C,UAAY,eAAeL,OAEzCtB,YAAW,KA7BA,MACd,IAAIuB,EAAUrD,EAAE,qBAEhB6C,QAAQC,IAAI,iBACZO,EAAQzC,MAAM4C,WAAa,QAC3BH,EAAQzC,MAAM6C,UAAY,iBAAiB,EAyBrCC,EAAU,GACC,IAAXP,EAAgB,EAILE,EAAQnC,YAAcoC,EAAcpC,YAAc,IAhBhEkC,EAAWC,EAAQnC,YAAc,GACjCiC,IAAaC,EAAW,IAAIO,QAAQ,GAoBvCN,EAAQO,UAAYP,EAAQQ,UAAY,uBAAyBR,EAAQQ,UAEzEN,IACAjD,EAAawD,aAAY,KACtBP,GAAQ,GACG,IAAXJ,EAAkB,IAAO,KAAK,EAIpCnC,EAAa+C,SAASC,IACnBA,EAAKjB,QAAWkB,IACTA,EAAEC,OAAOC,cAAc1D,UAAU2D,SAAS,iBAEzCJ,EAAKK,KAAO7D,EAAMwC,eACpBxC,EAAMwC,cAAgBgB,EAAKK,GAC3B7D,EAAM8D,kBACT,CACF,IAIJlD,OAAOmD,SAAW,WACf,GAAIpD,EAAW,OACf,MAAMqD,EAAYpD,OAAOqD,SAAWxE,SAASyE,gBAAgBF,UAEvDG,EAAa1D,EAAUuD,EAAY,EACnCI,EAAaD,EAAa1D,EAEhC,GAAI0D,EAAa,EAKd,OAJA1F,EAAG2B,MAAMiE,MAAQ,MACjB5F,EAAG2B,MAAMkE,QAAU,OAEnBrF,EAASgB,UAAUkB,IAAI,QAI1B1C,EAAG2B,MAAMiE,MAAQF,EAAa,KAC9B1F,EAAG2B,MAAMkE,QAAUF,EAEnBnF,EAASgB,UAAUC,OAAO,OAC7B,EA+EA,SAASqE,EAAaC,GACnBnF,EAAoBe,MAAMiE,MAAc,IAANG,EAAY,IAC9CjE,EAAMS,OAASwD,EAEfjG,EAAgB,SAAUiG,EAC7B,CAlEAjE,EAAMkE,UAAY,KAff9F,EAAQsB,UAAUkB,IAAI,WACtBxC,EAAQsB,UAAUC,OAAO,WAEzBF,EAAMG,WAAY,EAClBH,EAAM0E,WAAY,OAClBhG,EAAM0B,MAAMC,mBAAqB,YAYpCE,EAAMoE,QAAU,KACb5E,EAAcC,EAAM,EAGvBO,EAAMqE,aAAe,WAClB,MAAMC,EAActE,EAAMsE,YACpBlC,EAAWpC,EAAMoC,SAElBkC,IAEL1F,EAAkBiB,MAAMiE,OAASQ,GAAelC,EAAW,MAAMQ,QAAQ,GAAK,IAG9E/D,EAAiBgB,MAAM6C,UAAY,aAChC,MAAQ4B,GAAelC,EAAW,KAAO,GAAGQ,QAAQ,GAAK,aAG5D7D,EAAe+D,UAAY/E,EAAeuG,IAAgB,QAC7D,EAEAtE,EAAMuE,QAAU,WAEb,GAAI9E,EAAM+E,SAGP,OAFA9D,SACAoB,QAAQC,IAAI,UAIXtC,EAAMgF,SACPhF,EAAMiF,aAMTjF,EAAMkF,UAET,EAEA3E,EAAM4E,iBAAoB1B,IACvBlE,EAAY8D,UAAY,KAAO/E,EAAemF,EAAEC,OAAOf,UACvD5B,GAAgB,EAEZD,EACDA,GAAkB,EAIjBd,EAAMoF,UACPpF,EAAMoF,WAAY,EACTpF,EAAMG,YACfuB,IACAe,IACAxB,IACH,EAGHV,EAAM8E,UAAY,KAjEfrF,EAAM0E,WAAY,EAClB/F,EAAQsB,UAAUkB,IAAI,gBACtBxC,EAAQsB,UAAUC,OAAO,YAwE5BlB,EAAYuD,QAAU,SAAUkB,GAC7B,IAAI6B,EAAkBtG,EAAY0B,YAGlC6D,KAFiBd,EAAE8B,QAAU,IAAMD,GAEXnC,QAAQ,GACnC,EAEAnE,EAAYwG,QAAU,SAAU/B,GAC7BA,EAAEgC,iBAEF,MAAMC,EAAS,IACf,IAAIC,EAAYpF,EAAMS,OAGlByC,EAAEmC,OAAS,EACRD,EAAYD,EAAS,EAAGC,GAAaD,EAEtCC,EAAY,EAGXA,EAAYD,EAAS,EAAGC,GAAaD,EAEtCC,EAAY,EAIlBpB,GAAcoB,EAAUxC,QAAQ,GACnC,EAEAjE,EAAWqD,QAAWkB,IACnB,IAAK1C,EAAe,OAEpB,IAAI8E,EAAc3G,EAAWwB,YACzBoF,EAAiBC,KAAKC,OAAQvC,EAAE8B,QAAU,IAAMM,EAAe,KAC/DI,EAAW1F,EAAMoC,SAAWmD,EAAkB,IAClDvF,EAAMsE,aAAeoB,EAAQ9C,QAAQ,GAEhCnD,EAAMG,WAAcG,KAAKoE,WAC3BzD,GACH,EAIHtC,EAAQ4D,QAAU,WACVxB,IAELsB,QAAQC,IAAI,QAAStC,EAAMG,WACvBH,EAAMG,UACPI,EAAM2F,QAEN3F,EAAMW,OAEZ,EAEArC,EAAQ0D,QAAU,WACfvC,EAAMkF,WACNlF,EAAMoF,WAAY,CACrB,EAEAxG,EAAQ2D,QAAU,WACfvC,EAAMmG,UACT,EAEArH,EAAUyD,QAAU,WACjB,MAAM6D,GAASpG,EAAMgF,SAErBhF,EAAMgF,SAAWoB,EACjB7H,EAAgB,WAAY6H,GAC5BtH,EAAUmB,UAAUoG,OAAO,SAAUD,EACxC,EAEArH,EAAUwD,QAAU,WACjB,MAAM6D,GAASpG,EAAM+E,SAErB/E,EAAM+E,SAAWqB,EACjB7H,EAAgB,WAAY6H,GAC5BrH,EAAUkB,UAAUoG,OAAO,SAAUD,EACxC,EAEAnH,EAASsD,QAAU,IAAMb,EAA+B,EAC3D","sourcesContent":["import { handleTimeText, setLocalStorage } from \"./utils/appHelper.js\";\r\nimport {\r\n   dashboard,\r\n   cd,\r\n   cdImg,\r\n   playBtn,\r\n   prevBtn,\r\n   nextBtn,\r\n   randomBtn,\r\n   rePeatBtn,\r\n   musicVolume,\r\n   gotopBtn,\r\n   timeSlider,\r\n   timeSliderCurrent,\r\n   timeSliderHolder,\r\n   volumeSliderCurrent,\r\n   currentTimeEle,\r\n   durationEle,\r\n} from \"./constant.js\";\r\n\r\nconst $ = document.querySelector.bind(document);\r\nconst $$ = document.querySelectorAll.bind(document);\r\n\r\nlet intervalId;\r\n\r\nconst onPauseHandle = function (_this) {\r\n   playBtn.classList.remove(\"playing\");\r\n   _this.isPlaying = false;\r\n   cdImg.style.animationPlayState = \"paused\";\r\n};\r\n\r\nconst handleEvents = function () {\r\n   const _this = this;\r\n   const audio = $(\".audio\");\r\n   const songElements = $$(\".song-item\");\r\n\r\n   const cdWidth = cd.offsetWidth;\r\n   const isDesktop = window.innerWidth >= 724;\r\n\r\n   let firstTimeRender = true;\r\n   let isLoadedAudio = false;\r\n\r\n   audio.volume = this.volume;\r\n\r\n   // define methods\r\n   const playSong = function () {\r\n      audio.play();\r\n      _this.isPlaying = true;\r\n      playBtn.classList.add(\"playing\");\r\n   };\r\n\r\n   const scrollToActive = function (activeSongEle) {\r\n      setTimeout(() => {\r\n         activeSongEle.scrollIntoView({\r\n            behavior: \"smooth\",\r\n            block: \"center\",\r\n         });\r\n      }, 200);\r\n   };\r\n\r\n   const handleScrollActiveSongIntoView = (curIndex) => {\r\n      const activeSongEle = $(\".song-item.active\");\r\n      if (!activeSongEle) return;\r\n\r\n      if (curIndex !== undefined) return scrollToActive(songElements[curIndex]);\r\n\r\n      const rect = activeSongEle.getBoundingClientRect();\r\n\r\n      const playerHeight = dashboard.offsetHeight;\r\n      const topCondition = isDesktop ? rect.top > 0 : rect.top > playerHeight;\r\n      const bottomCondition = rect.top < window.innerHeight;\r\n\r\n      if (topCondition && bottomCondition) {\r\n         console.log(\"scroll\");\r\n         scrollToActive(activeSongEle);\r\n      } else {\r\n         console.log(\"no scroll\");\r\n      }\r\n   };\r\n\r\n   // if (!isDesktop) musicVolume.remove();\r\n   // else {\r\n   //    window.addEventListener(\"keydown\", (e) => {\r\n   //       e.preventDefault();\r\n\r\n   //       if (e.key === \" \") {\r\n   //          playBtn.click();\r\n   //       }\r\n   //    });\r\n   // }\r\n\r\n   cdImg.onclick = () => {\r\n      handleScrollActiveSongIntoView(_this.currentIndex);\r\n   };\r\n\r\n   const unScroll = () => {\r\n      let titleEl = $(\".title-wrapper h2\");\r\n\r\n      console.log(\"unscroll text\");\r\n      titleEl.style.transition = `unset`;\r\n      titleEl.style.transform = `translateX(0px)`;\r\n   };\r\n\r\n   const scrollText = () => {\r\n      if (intervalId) clearInterval(intervalId);\r\n\r\n      let titleEl = $(\".title-wrapper h2\");\r\n      let singerWrapper = $(\".title-wrapper\");\r\n      let duration, distance;\r\n\r\n      if (!titleEl || !singerWrapper) return;\r\n\r\n      const calc = () => {\r\n         // scroll distance\r\n         distance = titleEl.offsetWidth + 20;\r\n         duration = +(distance / 35).toFixed(1);\r\n      };\r\n\r\n      const scroll = () => {\r\n         console.log(\"scroll text\");\r\n         // add animation\r\n         titleEl.style.transition = `transform linear ${duration}s`;\r\n         titleEl.style.transform = `translateX(-${distance}px)`;\r\n\r\n         setTimeout(() => {\r\n            unScroll();\r\n         }, duration * 1000);\r\n      };\r\n\r\n      // if innerText less than container\r\n      let isOverFlow = titleEl.offsetWidth - singerWrapper.offsetWidth > 0 ? true : false;\r\n      if (!isOverFlow) return;\r\n\r\n      calc();\r\n\r\n      titleEl.innerHTML = titleEl.innerText + \"&nbsp; &nbsp; &nbsp;\" + titleEl.innerText;\r\n\r\n      scroll();\r\n      intervalId = setInterval(() => {\r\n         scroll();\r\n      }, duration * 1000 + 3000 + 1000);\r\n   };\r\n\r\n   // >>> play song when click\r\n   songElements.forEach((song) => {\r\n      song.onclick = (e) => {\r\n         if (e.target.parentElement.classList.contains(\"song-detail\")) return;\r\n\r\n         if (+song.id !== _this.currentIndex) {\r\n            _this.currentIndex = +song.id;\r\n            _this.loadCurrentSong();\r\n         }\r\n      };\r\n   });\r\n\r\n   // resize the cd when scroll\r\n   window.onscroll = function () {\r\n      if (isDesktop) return;\r\n      const scrollTop = window.scrollY || document.documentElement.scrollTop;\r\n\r\n      const newCdWidth = cdWidth - scrollTop / 2;\r\n      const newOpacity = newCdWidth / cdWidth;\r\n\r\n      if (newCdWidth < 0) {\r\n         cd.style.width = 0 + \"px\";\r\n         cd.style.opacity = 0;\r\n\r\n         gotopBtn.classList.add(\"show\");\r\n         return;\r\n      }\r\n\r\n      cd.style.width = newCdWidth + \"px\";\r\n      cd.style.opacity = newOpacity;\r\n\r\n      gotopBtn.classList.remove(\"show\");\r\n   };\r\n\r\n   const onPlayHandle = function () {\r\n      playBtn.classList.add(\"playing\");\r\n      playBtn.classList.remove(\"waiting\");\r\n\r\n      _this.isPlaying = true;\r\n      _this.isWaiting = false;\r\n      cdImg.style.animationPlayState = \"running\";\r\n   };\r\n\r\n   const onWaitingHandle = function () {\r\n      _this.isWaiting = true;\r\n      playBtn.classList.add(\"waiting\");\r\n      playBtn.classList.remove(\"playing\");\r\n   };\r\n\r\n   //  >>> audio handle\r\n   audio.onplaying = () => onPlayHandle();\r\n\r\n   audio.onpause = () => {\r\n      onPauseHandle(_this);\r\n   };\r\n\r\n   audio.ontimeupdate = function () {\r\n      const currentTime = audio.currentTime;\r\n      const duration = audio.duration;\r\n\r\n      if (!currentTime) return;\r\n\r\n      timeSliderCurrent.style.width = (currentTime / (duration / 100)).toFixed(1) + \"%\";\r\n\r\n      // timeSliderHolder.style.left = (currentTime / (duration / 100)).toFixed(1) + \"%\";\r\n      timeSliderHolder.style.transform = `translate(${\r\n         100 - +(currentTime / (duration / 100) + 1).toFixed(1) + \"%\"\r\n      }, -50%)`;\r\n\r\n      currentTimeEle.innerText = handleTimeText(currentTime) || \"00:00\";\r\n   };\r\n\r\n   audio.onended = function () {\r\n      // unScroll();\r\n      if (_this.isRepeat) {\r\n         playSong();\r\n         console.log(\"Repeat\");\r\n         return;\r\n      }\r\n\r\n      if (_this.isRandom) {\r\n         _this.randomSong();\r\n         // activeSong(_this.currentIndex);\r\n         return;\r\n      }\r\n\r\n      // default\r\n      _this.nextSong();\r\n      // activeSong(_this.currentIndex);\r\n   };\r\n\r\n   audio.onloadedmetadata = (e) => {\r\n      durationEle.innerText = \"/ \" + handleTimeText(e.target.duration);\r\n      isLoadedAudio = true;\r\n\r\n      if (firstTimeRender) {\r\n         firstTimeRender = false;\r\n         return;\r\n      }\r\n\r\n      if (_this.endOfList) {\r\n         _this.endOfList = false;\r\n      } else if (!_this.isPlaying) {\r\n         handleScrollActiveSongIntoView();\r\n         scrollText();\r\n         playSong();\r\n      }\r\n   };\r\n\r\n   audio.onwaiting = () => onWaitingHandle();\r\n\r\n   function updateVolume(vol) {\r\n      volumeSliderCurrent.style.width = vol * 100 + \"%\";\r\n      audio.volume = vol;\r\n\r\n      setLocalStorage(\"volume\", vol);\r\n   }\r\n\r\n   musicVolume.onclick = function (e) {\r\n      let volumeBaseWidth = musicVolume.offsetWidth;\r\n      let newVolume = (e.clientX - 25) / volumeBaseWidth;\r\n\r\n      updateVolume(+newVolume.toFixed(2));\r\n   };\r\n\r\n   musicVolume.onwheel = function (e) {\r\n      e.preventDefault();\r\n\r\n      const AMOUNT = 0.05;\r\n      let newVolume = audio.volume;\r\n\r\n      // scroll down\r\n      if (e.deltaY > 0) {\r\n         if (newVolume - AMOUNT > 0) newVolume -= AMOUNT;\r\n         else {\r\n            newVolume = 0;\r\n         }\r\n      } else {\r\n         if (newVolume + AMOUNT < 1) newVolume += AMOUNT;\r\n         else {\r\n            newVolume = 1;\r\n         }\r\n      }\r\n\r\n      updateVolume(+newVolume.toFixed(2));\r\n   };\r\n\r\n   timeSlider.onclick = (e) => {\r\n      if (!isLoadedAudio) return;\r\n\r\n      let playerWidth = timeSlider.offsetWidth;\r\n      let newCurrentTime = Math.floor(((e.clientX - 25) / playerWidth) * 100);\r\n      let newTime = (audio.duration * newCurrentTime) / 100;\r\n      audio.currentTime = +newTime.toFixed(2);\r\n\r\n      if (!_this.isPlaying && !this.isWaiting) {\r\n         playSong();\r\n      }\r\n   };\r\n\r\n   // >>> button handle\r\n   playBtn.onclick = function () {\r\n      if (!isLoadedAudio) return;\r\n\r\n      console.log(\"click\", _this.isPlaying);\r\n      if (_this.isPlaying) {\r\n         audio.pause(); // (default)\r\n      } else {\r\n         audio.play();\r\n      }\r\n   };\r\n\r\n   nextBtn.onclick = function () {\r\n      _this.nextSong();\r\n      _this.endOfList = false;\r\n   };\r\n\r\n   prevBtn.onclick = function () {\r\n      _this.prevSong();\r\n   };\r\n\r\n   randomBtn.onclick = function () {\r\n      const value = !_this.isRandom;\r\n\r\n      _this.isRandom = value;\r\n      setLocalStorage(\"isRandom\", value);\r\n      randomBtn.classList.toggle(\"active\", value);\r\n   };\r\n\r\n   rePeatBtn.onclick = function () {\r\n      const value = !_this.isRepeat;\r\n\r\n      _this.isRepeat = value;\r\n      setLocalStorage(\"isRepeat\", value);\r\n      rePeatBtn.classList.toggle(\"active\", value);\r\n   };\r\n\r\n   gotopBtn.onclick = () => handleScrollActiveSongIntoView(0);\r\n};\r\n\r\nexport { onPauseHandle };\r\nexport default handleEvents;\r\n"]}